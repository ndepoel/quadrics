const float shininess = 25;
const float3 lightCoef = { 0.25, 0.5, 1 };

struct Input
{
    float2 texcoord : TEXCOORD0;
};

struct Output
{
    float3 color    : COLOR;
};

void main(  Input input,
            uniform sampler2D surface,
            uniform sampler2D color,
            uniform float2 unproj_scale,
            uniform float2 unproj_offset,
            uniform float near,
            uniform float2 tex_res,
            uniform float3 lightpos,
            out Output output )
{
//    output.color = tex2D( color, input.texcoord ).rgb;
//    return;

    float3 frg_e = float3( input.texcoord * unproj_scale - unproj_offset, -near );

    float4 surfaceTexel = tex2D( surface, input.texcoord );
    float3 nrm_e = surfaceTexel.xyz;
    float mu = surfaceTexel.w;    
    float3 pos_e = mu * frg_e;

	// Evaluate the lighting model
	float3 lighting;
	float3 lightdir = normalize( lightpos - pos_e );
		
	// Pure Phong shading
	lighting.x = 1;
	lighting.y = saturate( dot( nrm_e, lightdir ) );
	lighting.z = pow( saturate( dot( normalize( -pos_e ), reflect( -lightdir, nrm_e ) ) ), shininess );
	    
	output.color = tex2D( color, input.texcoord ).rgb * dot( lightCoef, lighting );
//    output.color = 1;
	
	// Silhouette outlines
	float2 tc = input.texcoord - tex_res;
	float4 grad_dx = tex2D( surface, tc );
	
	tc.x = input.texcoord.x + tex_res.x;
	float4 grad_dy = tex2D( surface, tc );
	
	tc.y = input.texcoord.y + tex_res.y;
	float4 grad = tex2D( surface, tc );
	grad_dx -= grad;
	
	tc.x = input.texcoord.x - tex_res.x;
	grad = tex2D( surface, tc );
	grad_dy -= grad;
	
	grad = grad_dx - grad_dy;
	grad *= grad;
	grad_dy = grad_dx + grad_dy;
	grad += grad_dy * grad_dy;
	
	grad.w = dot( float4( 0.5, 0.5, 0.5, 10 ), grad );
	grad.w = min( grad.w, 0.5 );
	
	output.color -= output.color * grad.w;
}
